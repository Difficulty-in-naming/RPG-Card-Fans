{"version":3,"file":"rand-seed.js","sources":["../src/Algorithms/Base.ts","../src/Rand.ts","../src/Algorithms/Mulberry32.ts","../src/Algorithms/Sfc32.ts","../src/Algorithms/Xoshiro128ss.ts","../src/helpers.ts"],"sourcesContent":["/**\n * @class\n * @classdesc Base class all algorithm implementations should inherit from.\n */\nabstract class Base {\n    /**\n     * Generate a hash from a string that is suitable to use as a seed for any\n     * of the PRNG's that inherit from this.\n     *\n     * @param {string} str\n     * @returns {Function}\n     */\n    protected static _xfnv1a(str: string): () => number {\n        let h = 2166136261 >>> 0;\n\n        for (let i = 0; i < str.length; i++) {\n            h = Math.imul(h ^ str.charCodeAt(i), 16777619);\n        }\n\n        return (): number => {\n            h += h << 13;\n            h ^= h >>> 7;\n            h += h << 3;\n            h ^= h >>> 17;\n\n            return (h += h << 5) >>> 0;\n        };\n    }\n}\n\nexport default Base;\n","import AlgorithmContract from './Algorithm';\nimport Mulberry32 from './Algorithms/Mulberry32';\nimport Sfc32 from './Algorithms/Sfc32';\nimport Xoshiro128ss from './Algorithms/Xoshiro128ss';\nimport { isNullOrUndefined } from './helpers';\n\n/**\n * Available seedable random number generator algorithms.\n *\n * @var {PRNG}\n */\nexport enum PRNG {\n    sfc32 = 'sfc32',\n    mulberry32 = 'mulberry32',\n    xoshiro128ss = 'xoshiro128ss',\n}\n\n/**\n * A class for generating random numbers. Several different (seedable) random\n * number generator algorithms are configurable.\n *\n * See https://stackoverflow.com/a/47593316/7024747 for more info.\n * @class\n * @classdesc A class for generating random numbers.\n */\nclass Rand {\n    /**\n     * The string that will be used for generating a suitable hash for any of\n     * the provided PRNG algorithms.\n     *\n     * @var {string}\n     */\n    private str?: string;\n\n    /**\n     * The PRNG algorithm that should be used for random number generation.\n     *\n     * @var {PRNG}\n     */\n    private prng: PRNG;\n\n    /**\n     * The generator that should be used for generating random numbers.\n     *\n     * @var {Function}\n     */\n    private generator: AlgorithmContract;\n\n    /**\n     * Create a new rand instance.\n     *\n     * @param {string} str\n     * @param {PRNG} prng\n     */\n    public constructor(str?: string, prng: PRNG = PRNG.sfc32) {\n        this.str = str;\n        this.prng = prng;\n        this.generator = this._initializeGenerator();\n    }\n\n    /**\n     * Generate a new random number using the selected generator.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        return this.generator.next();\n    }\n\n    /**\n     * Initialize the chosen random number generator.\n     *\n     * @returns {Algorithm|Function}\n     */\n    private _initializeGenerator(): AlgorithmContract {\n        if (isNullOrUndefined(this.str)) return this.wrap();\n\n        switch (this.prng) {\n            case 'sfc32':\n                return new Sfc32(this.str);\n            case 'mulberry32':\n                return new Mulberry32(this.str);\n            case 'xoshiro128ss':\n                return new Xoshiro128ss(this.str);\n            default:\n                return this.wrap();\n        }\n    }\n\n    /**\n     * Wrap the standard random function in an object.\n     *\n     * @returns {Algorithm}\n     */\n    private wrap(): AlgorithmContract {\n        return {\n            /**\n             * Generate a random number.\n             *\n             * @return {number}\n             */\n            next(): number {\n                return Math.random();\n            },\n        };\n    }\n}\n\nexport default Rand;\n","import Base from './Base';\nimport Algorithm from '../Algorithm';\n\n/**\n * @class\n * @classdesc Concrete mulberry32 implementation.\n */\nclass Mulberry32 extends Base implements Algorithm {\n    /**\n     * Seed parameter.\n     *\n     * @var {number}\n     */\n    private a: number;\n\n    /**\n     * Create a new mulberry32 instance.\n     *\n     * @param {string} str\n     */\n    public constructor(str: string) {\n        super();\n\n        this.a = Mulberry32._xfnv1a(str)();\n    }\n\n    /**\n     * Generate a random number using the mulberry32 algorithm.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        let t = (this.a += 0x6d2b79f5);\n        t = Math.imul(t ^ (t >>> 15), t | 1);\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    }\n}\n\nexport default Mulberry32;\n","import Base from './Base';\nimport Algorithm from '../Algorithm';\n\n/**\n * @class\n * @classdesc Concrete sfc32 implementation.\n */\nclass Sfc32 extends Base implements Algorithm {\n    /**\n     * Seed parameters.\n     *\n     * @var {number}\n     */\n    private a: number;\n    private b: number;\n    private c: number;\n    private d: number;\n\n    /**\n     * Create a new sfc32 instance.\n     *\n     * @param {string} str\n     */\n    public constructor(str: string) {\n        super();\n\n        // Create the seed for the random number algorithm\n        const seed = Sfc32._xfnv1a(str);\n        this.a = seed();\n        this.b = seed();\n        this.c = seed();\n        this.d = seed();\n    }\n\n    /**\n     * Generate a random number using the sfc32 algorithm.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        this.a >>>= 0;\n        this.b >>>= 0;\n        this.c >>>= 0;\n        this.d >>>= 0;\n\n        let t = (this.a + this.b) | 0;\n\n        this.a = this.b ^ (this.b >>> 9);\n        this.b = (this.c + (this.c << 3)) | 0;\n        this.c = (this.c << 21) | (this.c >>> 11);\n        this.d = (this.d + 1) | 0;\n        t = (t + this.d) | 0;\n        this.c = (this.c + t) | 0;\n\n        return (t >>> 0) / 4294967296;\n    }\n}\n\nexport default Sfc32;\n","import Base from './Base';\nimport Algorithm from '../Algorithm';\n\n/**\n * @class\n * @classdesc Concrete xoshiro128** implementation.\n */\nclass Xoshiro128ss extends Base implements Algorithm {\n    /**\n     * Seed parameters.\n     *\n     * @var {number}\n     */\n    private a: number;\n    private b: number;\n    private c: number;\n    private d: number;\n\n    /**\n     * Create a new xoshiro128** instance.\n     *\n     * @param {string} str\n     */\n    public constructor(str: string) {\n        super();\n\n        // Create the seed for the random number algorithm\n        const seed = Xoshiro128ss._xfnv1a(str);\n        this.a = seed();\n        this.b = seed();\n        this.c = seed();\n        this.d = seed();\n    }\n\n    /**\n     * Generate a random number using the xoshiro128** algorithm.\n     *\n     * @returns {number}\n     */\n    public next(): number {\n        const t = this.b << 9;\n        let r = this.a * 5;\n\n        r = (r << 7) | ((r >>> 25) * 9);\n\n        this.c ^= this.a;\n        this.d ^= this.b;\n        this.b ^= this.c;\n        this.a ^= this.d;\n        this.c ^= t;\n        this.d = (this.d << 11) | (this.d >>> 21);\n\n        return (r >>> 0) / 4294967296;\n    }\n}\n\nexport default Xoshiro128ss;\n","/**\n * Determine if the given value is undefined.\n *\n * @param {mixed} value\n * @returns {boolean}\n */\nexport const isUndefined = (value: unknown): value is undefined => typeof value === 'undefined';\n\n/**\n * Determine if the given value is null.\n *\n * @param {mixed} value\n * @returns {boolean}\n */\nexport const isNull = (value: unknown): value is null => value === null;\n\n/**\n * Determine if the given value is null or undefined.\n *\n * @param {mixed} value\n * @returns {boolean}\n */\nexport const isNullOrUndefined = (value: unknown): value is null | undefined => {\n    return isNull(value) || isUndefined(value);\n};\n"],"names":["PRNG","Base","str","h","i","length","Math","imul","charCodeAt","_super","_this","a","Mulberry32","_xfnv1a","__extends","t","this","seed","Sfc32","b","c","d","Xoshiro128ss","r","prng","sfc32","generator","_initializeGenerator","Rand","next","value","isNull","isUndefined","wrap","random"],"mappings":"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"}