"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertInterfacesToCSharp = exports.extractProperties = exports.extractInterfaceName = void 0;
var interfaceNameRegex = /(interface|class) ([a-zA-Z0-9_?]+) /g;
var interfaceBodyRegex = /((interface|class) [a-zA-Z0-9_?]+\s*{[\sa-zA-Z0-9_:?;\[\]]+})/g;
var interfaceBodyExportsOnlyRegex = /(export (interface|class) [a-zA-Z0-9_?]+\s*{[\sa-zA-Z0-9_:?;\[\]]+})/g;
var propertyRegex = /([a-zA-Z0-9_?]+\s*:\s*[a-zA-Z_\[\]]+)/g;
var convertToPascalCase = function (str) {
    return str.length >= 2
        ? "".concat(str[0].toUpperCase()).concat(str.slice(1))
        : str.toUpperCase();
};
var typeMappings = {
    string: "string",
    number: "int",
    boolean: "bool",
    any: "object",
    void: "void",
    never: "void",
};
function convertInterfacesToCSharp(tsInterfaces, exportsOnly, classPrefix, classSuffix) {
    var matches = exportsOnly
        ? tsInterfaces.match(interfaceBodyExportsOnlyRegex)
        : tsInterfaces.match(interfaceBodyRegex);
    if (!matches) {
        return "";
    }
    return matches
        .map(function (iface) {
        return convertInterfaceToCSharp(iface, classPrefix ? classPrefix : "", classSuffix ? classSuffix : "");
    })
        .join("");
}
exports.convertInterfacesToCSharp = convertInterfacesToCSharp;
var csClass = function (className, classProperties) {
    return "\npublic class ".concat(className, " {\n    ").concat(classProperties, "\n}\n    ");
};
var csProperty = function (propertyName, propertyType) {
    var isList = propertyType.includes("[");
    propertyType = propertyType.replace(/\[\]/g, "");
    var csType;
    if (Object.keys(typeMappings).includes(propertyType)) {
        csType = typeMappings[propertyType];
    }
    else {
        csType = convertToPascalCase(propertyType);
    }
    // Convert list to IEnumerable if necessary
    if (isList) {
        csType = "IEnumerable<".concat(csType, ">");
    }
    var csPropertyName = convertToPascalCase(propertyName);
    return "\n    [JsonProperty(\"".concat(propertyName, "\")]\n    public ").concat(csType, " ").concat(csPropertyName, ";\n    ");
};
var convertInterfaceToCSharp = function (tsInterface, classPrefix, classSuffix) {
    var interfaceName = "".concat(classPrefix).concat((0, exports.extractInterfaceName)(tsInterface)).concat(classSuffix);
    var props = (0, exports.extractProperties)(tsInterface);
    var csProps = props
        .map(function (property) {
        return csProperty(property.property, property.type);
    })
        .join("");
    return csClass(interfaceName, csProps);
};
var extractInterfaceName = function (tsInterface) {
    interfaceNameRegex.lastIndex = 0;
    var matches = interfaceNameRegex.exec(tsInterface);
    if (!matches || matches.length === 0) {
        return "";
    }
    return matches[matches.length - 1];
};
exports.extractInterfaceName = extractInterfaceName;
var extractProperties = function (tsInterface) {
    propertyRegex.lastIndex = 0;
    var matches = tsInterface.match(propertyRegex);
    if (!matches) {
        return [];
    }
    var tsProperties = matches.map(function (match) {
        var components = match.split(":");
        return {
            property: components[0].trim().replace("?", ""),
            type: components[1].trim(),
        };
    });
    return tsProperties;
};
exports.extractProperties = extractProperties;
